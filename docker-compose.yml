version: "3"
services:
  mysql:
    image: mysql:5.7
    restart: on-failure
    container_name: mysql
    env_file:
      - .env
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - 3306:3306
    networks:
      - mysql-network
    volumes:
      - mysql:/var/lib/mysql

  postgres:
    image: postgres
    restart: on-failure
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
        - '5432:5432'
    networks:
      - mysql-network
    volumes:
      - postgres:/var/lib/postgres

  employee-service:
    container_name: employee-service
    restart: on-failure
    environment:
      - spring.datasource.url=${EMPLOYEE_SERVICE_DATASOURCE_URL}
      - spring.datasource.username=${EMPLOYEE_SERVICE_DATASOURCE_USERNAME}
      - spring.datasource.password=${EMPLOYEE_SERVICE_DATASOURCE_PASSWORD}
      - eureka.client.service-url.defaultZone=${EUREKA_CLIENT_URL}
      - spring.jpa.hibernate.ddl-auto=none
    image: acreyes0704/full-stack-coding-challenge_employee-service:latest
    # build: 
    #   context: ./employee-service/
    #   dockerfile: Dockerfile
    ports: 
      - 8082:8082
    networks:
      - mysql-network
    depends_on:
      - mysql

  login-service:
    container_name: login-service
    restart: on-failure
    environment:
      - spring.datasource.url=${LOGIN_SERVICE_DATASOURCE_URL}
      - spring.datasource.username=${LOGIN_SERVICE_DATASOURCE_USERNAME}
      - spring.datasource.password=${LOGIN_SERVICE_DATASOURCE_PASSWORD}
      - eureka.client.service-url.defaultZone=${EUREKA_CLIENT_URL}
      - spring.jpa.hibernate.ddl-auto=none
    image: acreyes0704/full-stack-coding-challenge_login-service:latest
    # build: 
    #   context: ./login-service/
    #   dockerfile: Dockerfile
    ports: 
      - 8081:8081
    networks:
      - mysql-network
    depends_on:
      - postgres

  api-gateway:
    container_name: api-gateway
    restart: on-failure
    environment:
      - zuul.routes.login.path=${ZUUL_LOGIN_PATH}
      - zuul.routes.login.url=${ZUUL_LOGIN_URL}
      - zuul.routes.employee.path=${ZUUL_EMPLOYEE_PATH}
      - zuul.routes.employee.url=${ZUUL_EMPLOYEE_URL}
      - ribbon.eureka.enabled=false
      - eureka.client.fetch-registry=false
      - eureka.client.register-with-eureka=false
    image: acreyes0704/full-stack-coding-challenge_api-gateway:latest
    # build: 
    #   context: ./api-gateway/
    #   dockerfile: Dockerfile
    ports: 
      - 8080:8080
    networks:
      - mysql-network
    depends_on:
      - employee-service
      - login-service

  discovery-service:
    container_name: discovery-service
    restart: on-failure
    environment:
      - eureka.client.register-with-eureka=false
      - eureka.client.fetch-registry=false
    image: acreyes0704/full-stack-coding-challenge_discovery-service:latest
    # build: 
    #   context: ./discovery-service/
    #   dockerfile: Dockerfile
    ports: 
      - 8761:8761
    networks:
      - mysql-network

  react-ui:
    container_name: react-ui
    restart: on-failure
    image: acreyes0704/full-stack-coding-challenge_react-ui:latest
    # build: 
    #   context: ./react-ui/
    #   dockerfile: Dockerfile
    ports: 
      - 3000:3000
    networks:
      - mysql-network
    depends_on:
      - api-gateway

  angular-ui:
    container_name: angular-ui
    restart: on-failure
    image: acreyes0704/full-stack-coding-challenge_angular-ui:latest
    # build: 
    #   context: ./angular/
    #   dockerfile: Dockerfile
    ports: 
      - 4200:4200
    networks:
      - mysql-network
    depends_on:
      - api-gateway

volumes:
  mysql:
  postgres:

networks:
  mysql-network:
      
